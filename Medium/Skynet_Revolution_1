import sys
import math
from collections import defaultdict
# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
network = dict()
network = defaultdict(list)
gateway = list()

level = 0
visited = []
queue = []

def block_link(visited, network, node, gateway):
    # checks to see if agent is next to any gateways
    g = set(gateway) & set(network[node])
    is_empty = g == set()
    
    #blocks links that will lead the agent straight to a gateway
    if not is_empty:
        return(str(list(g)[0]) + " " + str(node))
    
    #if there is no imediate threat other links will be blocked
    for x in range (0, len(gateway)):
        if len(network[i]) > 0:
            return(str(i) + " " + str(network[i][0]))
        




# n: the total number of nodes in the level, including the gateways
# l: the number of links
# e: the number of exit gateways
n, l, e = [int(i) for i in input().split()]
for i in range(l):
    # n1: N1 and N2 defines a link between these nodes
    n1, n2 = [int(j) for j in input().split()]
    network[n1].append(n2)
    network[n2].append(n1)

for i in range(e):
    ei = int(input())  # the index of a gateway node
    gateway.append(ei)
# game loop
while True:
    si = int(input())  # The index of the node on which the Skynet agent is positioned this turn

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)


    # Example: 0 1 are the indices of the nodes you wish to sever the link between
    link = (block_link(visited, network, si, gateway))
    print(link)

