import sys
import math
from collections import defaultdict
# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
network = dict()
network = defaultdict(list)
gateway = list()
visited = []
queue = []
        
#performs a bfs to create a map of nodes connected to gateways
def bfs(visited, network, node, gateway):
    visited.append(node)
    queue.append(node)
    connected_nodes = defaultdict(list)

    while queue:
        s = queue.pop(0)
        g = set(gateway) & set(network[s])
        is_empty = g == set()

        if not is_empty:
            connected_nodes[s] = g
        else:
            for neighbor in network[s]:
                if neighbor not in visited:
                    visited.append(neighbor)
                    queue.append(neighbor)
    return connected_nodes


#performs a bfs to calculate the shortest path
def bfs_shortest_path(network, start, end):
    explored = []
    queue = [[start]]
    
    while queue:
        path = queue.pop(0)

        node = path[-1]
        if node not in explored:
            neighbours = network[node]

            for neighbour in neighbours:
                new_path = list(path)
                new_path.append(neighbour)
                queue.append(new_path)
                if neighbour == end:
                    return new_path
            explored.append(node)
    


# n: the total number of nodes in the level, including the gateways
# l: the number of links
# e: the number of exit gateways
n, l, e = [int(i) for i in input().split()]
for i in range(l):
    # n1: N1 and N2 defines a link between these nodes
    n1, n2 = [int(j) for j in input().split()]
    network[n1].append(n2)
    network[n2].append(n1)

for i in range(e):
    ei = int(input())  # the index of a gateway node
    gateway.append(ei)


dist_gateway = [500] * len(network)

shortest = 500
shortest_path = []

# game loop
while True:
    si = int(input())  # The index of the node on which the Skynet agent is positioned this turn

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)


    # Example: 0 1 are the indices of the nodes you wish to sever the link between
    no_danger = True


    for i in range(0, len(gateway)):
        path = bfs_shortest_path(network, si, gateway[i])
        nodes = bfs(visited, network, si, gateway)
        #print(nodes)

        
        
        #dist_gateway[i] = len(path)
        current_gateway = path[-2]
        
        if len(path) - 1 == len(nodes[current_gateway]):
            a = path[-1]
            b = path[-2]
            network[a].remove(b)
            network[b].remove(a)
            no_danger = False
            print(a, b)

        elif len(path) < shortest:
            shortest = len(path)
            shortest_path = path


    if no_danger == True:
        a = shortest_path[-1]
        b = shortest_path[-2]
        network[a].remove(b)
        network[b].remove(a)

        print(a, b)

